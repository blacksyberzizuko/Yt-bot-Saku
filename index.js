const { Client, LocalAuth, Buttons, MessageMedia } = require('whatsapp-web.js');
const qrcode = require('qrcode-terminal');
const moment = require('moment-timezone');
const colors = require('colors');
const fs = require('fs');
const ytdl = require('ytdl-core');

const client = new Client({ 
    restartOnAuthFail: true,
    puppeteer: {
        headless: true,
        args: [ '--no-sandbox', '--disable-setuid-sandbox' ]
    },
    authStrategy: new LocalAuth({ clientId: "client" })
});
const config = require('./src/config/config.json');

client.on('qr', (qr) => {
    console.log(`[${moment().tz(config.timezone).format('HH:mm:ss')}] Scan the QR below : `);
    qrcode.generate(qr, { small: true });
});
 
client.on('ready', () => {
    console.clear();
    const consoleText = './src/config/console.txt';
    fs.readFile(consoleText, 'utf-8', (err, data) => {
        if (err) {
            console.log(`[${moment().tz(config.timezone).format('HH:mm:ss')}] Console Text not found!`.yellow);
            console.log(`[${moment().tz(config.timezone).format('HH:mm:ss')}] ${config.name} is Already!`.green);
        } else {
            console.log(data.green);
            console.log(`[${moment().tz(config.timezone).format('HH:mm:ss')}] ${config.name} is Already!`.green);
        }
    })
});

client.on('message', async (message) => {
    let url = message.body.split(' ')[1];
    let isGroups = message.from.endsWith('@g.us') ? true : false;

    async function detailYouTube(url) {
        client.sendMessage(message.from, '*‚ù≤‚è≥‚ù≥* *‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂∏‡∂Ø‡∂ö‡∑ä ‡∂ª‡∑ê‡∂Ø‡∑ì‡∑É‡∑í‡∂ß‡∑í‡∂±‡∑ä‡∂±.....*');
        try {
            let info = await ytdl.getInfo(url);
            let data = {
                "channel": {
                    "name": info.videoDetails.author.name,
                    "user": info.videoDetails.author.user,
                    "channelUrl": info.videoDetails.author.channel_url,
                    "userUrl": info.videoDetails.author.user_url,
                    "verified": info.videoDetails.author.verified,
                    "subscriber": info.videoDetails.author.subscriber_count
                },
                "video": {
                    "title": info.videoDetails.title,
                    "description": info.videoDetails.description,
                    "lengthSeconds": info.videoDetails.lengthSeconds,
                    "videoUrl": info.videoDetails.video_url,
                    "publishDate": info.videoDetails.publishDate,
                    "viewCount": info.videoDetails.viewCount
                }
            }
            client.sendMessage(message.from, `*üîñ ‡∂†‡∑ê‡∂±‡∂Ω‡∂∫‡∑ô‡∑Ñ‡∑í ‡∂≠‡∑ú‡∂ª‡∂≠‡∑î‡∂ª‡∑î*\n‚ù≤‚óè‚ù≥ *‡∂†‡∑ê‡∂±‡∂Ω‡∂∫‡∑ö ‡∂±‡∂∏* : *${data.channel.name}*\n‚ù≤‚ö°‚ù≥ *‡∂∂‡∑è‡∑Ä‡∑í‡∂≠ ‡∂ö‡∂Ω ‡∂¥‡∑î‡∂Ø‡∑ä‡∂ú‡∂Ω‡∂∫‡∑è* : *${data.channel.user}*\n‚ù≤üî±‚ù≥ *‡∂Ü‡∂ª‡∂ö‡∑ä‡∑Ç‡∑è‡∑Ä* : *${data.channel.verified}*\n‚ù≤üè∑Ô∏è‚ù≥ *‡∂†‡∑ê‡∂±‡∂Ω‡∂∫* : *${data.channel.channelUrl}*\n‚ù≤üçÉ‚ù≥ *‡∑É‡∂∂‡∑ä‡∑É‡∑ä‡∂ö‡∑ä‚Äç‡∂ª‡∂∫‡∑í‡∂∂‡∂ª‡∑ä‡∑É‡∑ä* : *${data.channel.subscriber}*\n *üë∏SAKURA-YT-MD...*`);
            client.sendMessage(message.from, `*üåø ‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù‡∑Ä‡∑ô‡∑Ñ‡∑í ‡∂≠‡∑ú‡∂ª‡∂≠‡∑î‡∂ª‡∑î*\n‚ù≤üîñ‚ù≥ *‡∂∏‡∑è‡∂≠‡∑ò‡∂ö‡∑è‡∑Ä* : *${data.video.title}*\n‚ù≤üïß‚ù≥ *‡∂ö‡∑è‡∂Ω‡∑É‡∑ì‡∂∏‡∑è‡∑Ä* : *${data.video.lengthSeconds}*\n‚ù≤üñáÔ∏è‚ù≥ *URL ‡∂Ω‡∑í‡∂±‡∑ä‡∂ö‡∑î‡∑Ä* : *${data.video.videoUrl}*\n‚ù≤üç≠‚ù≥ *‡∂ú‡∑ì‡∂≠‡∂∫ ‡∂¢‡∂±‡∑É‡∂≠‡∑î ‡∂ö‡∂Ω ‡∂Ø‡∑í‡∂±‡∂∫* : *${data.video.publishDate}*\n‚ù≤üëÄ‚ù≥ *‡∂±‡∑ê‡∂ª‡∂π‡∑î‡∂∏‡∑ä ‡∑Ä‡∑è‡∂ª* : *${data.video.viewCount}*\n *üë∏SAKURA-YT-MD...*`)
            client.sendMessage(message.from, 'üì© *‡∂ú‡∑ì‡∂≠‡∂∫ ‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∑Ä ‡∂Ω‡∂∂‡∑è‡∂Ø‡∑ì ‡∂á‡∂≠...*');
        } catch (err) {
            console.log(err);
            client.sendMessage(message.from, '‚ùå *‡∂ú‡∑ì‡∂≠‡∂∫ ‡∂Ω‡∂∂‡∑è‡∂Ø‡∑ì‡∂∏‡∂ß ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö‡∑í ‡∑Ä‡∑í‡∂∫....*');
        }
    }

    async function downloadYouTube(url, format, filter) {
        client.sendMessage(message.from, '*‚ù≤‚è≥‚ù≥* *‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂∏‡∂Ø‡∂ö‡∑ä ‡∂ª‡∑ê‡∂Ø‡∑ì‡∑É‡∑í‡∂ß‡∑í‡∂±‡∑ä‡∂±....*\n *üì©Download by _SAKURA-YT-MD_..*');
        let timeStart = Date.now();
        try {
            let info = await ytdl.getInfo(url);
            let data = {
                "channel": {
                    "name": info.videoDetails.author.name,
                    "user": info.videoDetails.author.user,
                    "channelUrl": info.videoDetails.author.channel_url,
                    "userUrl": info.videoDetails.author.user_url,
                    "verified": info.videoDetails.author.verified,
                    "subscriber": info.videoDetails.author.subscriber_count
                },
                "video": {
                    "title": info.videoDetails.title,
                    "description": info.videoDetails.description,
                    "lengthSeconds": info.videoDetails.lengthSeconds,
                    "videoUrl": info.videoDetails.video_url,
                    "publishDate": info.videoDetails.publishDate,
                    "viewCount": info.videoDetails.viewCount
                }
            }
            ytdl(url, { filter: filter, format: format, quality: 'highest' }).pipe(fs.createWriteStream(`./src/database/download.${format}`)).on('finish', async () => {
                const media = await MessageMedia.fromFilePath(`./src/database/download.${format}`);
                let timestamp = Date.now() - timeStart;
                media.filename = `${config.filename.mp3}.${format}`;
                await client.sendMessage(message.from, media, { sendMediaAsDocument: true });
                client.sendMessage(message.from, `‚ù≤üîñ‚ù≥ *‡∂∏‡∑è‡∂≠‡∑ò‡∂ö‡∑è‡∑Ä* : *${data.video.title}*\n‚ù≤üåø‚ù≥ *‡∂†‡∑ê‡∂±‡∂Ω‡∂∫* : *${data.channel.user}*\n‚ù≤üëÄ‚ù≥ *‡∂±‡∑ê‡∂ª‡∂π‡∑î‡∂∏‡∑ä ‡∑Ä‡∑è‡∂ª* : *${data.video.viewCount}*\n‚ù≤‚öñÔ∏è‚ù≥ *‡∂ö‡∑è‡∂Ω‡∑É‡∑ì‡∂∏‡∑è‡∑Ä* : *${timestamp}*`);
                client.sendMessage(message.from, '*üì© *‡∂ú‡∑ì‡∂≠‡∂∫ ‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∑Ä ‡∂Ω‡∂∂‡∑è‡∂Ø‡∑ì ‡∂á‡∂≠...*');
            });
        } catch (err) {
            console.log(err);
            client.sendMessage(message.from, '*‚ùå *‡∂ú‡∑ì‡∂≠‡∂∫ ‡∂Ω‡∂∂‡∑è‡∂Ø‡∑ì‡∂∏‡∂ß ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö‡∑í ‡∑Ä‡∑í‡∂∫....*');
        }
    }

    if ((isGroups && config.groups) || isGroups) return;
    if (message.body == `${config.prefix}help`) return client.sendMessage(message.from, `*${config.name}*\n\n[üé•] : *${config.prefix}video <youtube-url>*\n[üéß] : *${config.prefix}audio <youtube-url>*\n\n*Example :*\n${config.prefix}audio https://youtu.be`);
    if (url == undefined) return client.sendMessage(message.from, '*üîñ ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂±‡∑í‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í _URL_ ‡∂á‡∂≠‡∑î‡∂Ω‡∂≠‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±..*');
    if (!ytdl.validateURL(url)) return client.sendMessage(message.from, '*üîñ ‡∂±‡∑í‡∑Ä‡∑ê‡∂ª‡∑ê‡∂Ø‡∑í _URL_ ‡∂á‡∂≠‡∑î‡∂Ω‡∂≠‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±..*');
    if (message.body.startsWith(`${config.prefix}audio`)) {
        downloadYouTube(url, 'mp3', 'Only Audio');
    } else if (message.body.startsWith(`${config.prefix}video`)) {
        downloadYouTube(url, 'mp4', 'audioandvideo');
    } else if (message.body.startsWith(`${config.prefix}detail`)) {
        detailYouTube(url);
    }
});

client.initialize();
